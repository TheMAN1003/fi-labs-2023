#include <iostream>
#include <bitset>
#include <fstream>

using std::cin, std::cout, std::vector, std::pair;

//void L1(u_int64_t &x, u_int64_t &x0)
//{
//    u_int64_t l = ((x >> 6) & 1) ^ ((x >> 4) & 1) ^ ((x >> 1) & 1) ^ (x & 1);
//    x0 = x & 1;
//    x = (x>>1) ^ (l << 29);
//}
//
//
//void L2(u_int64_t &y, u_int64_t  &y0)
//{
//    u_int64_t l = ((y >> 3) & 1) ^ (y & 1);
//    y0 = y & 1;
//    y = (y >> 1) ^ (l << 30);
//}
//
//void L3(u_int64_t &s, u_int64_t &s0)
//{
//    u_int64_t l = ((s >> 7) & 1) ^((s >> 5) & 1) ^ ((s >> 3) & 1) ^ ((s >> 2) & 1) ^ ((s >> 1) & 1) ^ (s & 1);
//    s0 = s & 1;
//    s = (s >> 1) ^ (l << 31);
//}

void L1(u_int64_t &x, u_int64_t &x0)
{
    u_int64_t l = (x & 1) ^ ((x >> 3) & 1);
    x0 = x & 1;
    x = (x>>1) ^ (l << 24);
}


void L2(u_int64_t &y, u_int64_t  &y0)
{
    u_int64_t l = ((y >> 6) & 1)^ ((y >> 2) & 1)^ ((y >> 1) & 1) ^ (y & 1);
    y0 = y & 1;
    y = (y >> 1) ^ (l << 25);
}


void L3(u_int64_t &s, u_int64_t &s0)
{
    u_int64_t l = ((s >> 5) & 1) ^((s >> 2) & 1) ^ ((s >> 1) & 1) ^ (s & 1);
    s0 = s & 1;
    s = (s >> 1) ^ (l << 26);
}



u_int64_t F(u_int64_t &x, u_int64_t& y, u_int64_t& s)
{
    return (s & x) ^ ((1 ^ s) & y);
}

const int wt8[256] = {0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8};

u_int16_t R(vector<uint64_t> x, vector<uint64_t> z)
{
    vector<uint64_t> tmp(x.size());
    if(x.size() != z.size())
    {
        std::cout<<"prblem\n\n";
    }
    for(size_t i = 0; i < x.size(); ++i)
    {
        tmp[i] = x[i] ^ z[i];
    }

    u_int16_t R = 0;
    for (int k = 0; k < tmp.size(); ++k)
    {
        for (int i = 0; i < 64; i += 8)
        {
            R += wt8[(tmp[k] >> i) & (255)];
        }
    }
    return R;
}

u_int16_t R1(vector<uint64_t> x, vector<uint64_t> z)
{
    vector<uint64_t> tmp(x.size());
    if(x.size() != z.size())
    {
        std::cout<<"prblem\n\n";
    }
    for(size_t i = 0; i < x.size(); ++i)
    {
        tmp[i] = x[i] ^ z[i];
    }

    u_int16_t R = 0;
    for (int k = 0; k < tmp.size(); ++k)
    {
        for (int i = int(log2(tmp[k])); i >= 0; --i)
        {
            R += (tmp[k] >> i) & 1;
        }
    }
    return R;
}

u_int16_t R2(vector<uint64_t> x, vector<uint64_t> z, vector<int>& wt)
{
    vector<uint64_t> tmp(x.size());

    for(size_t i = 0; i < x.size(); ++i)
    {
        tmp[i] = x[i] ^ z[i];
    }

    u_int16_t R = 0;
    for (int k = 0; k < tmp.size(); ++k)
    {
        for (int i = 0; i < 64; i += 16)
        {
            R += wt[(tmp[k] >> i) & (65535)];
        }
    }
    return R;
}




void takeN(vector<u_int64_t> &z, int N)
{
    std::string s
    std::cout<<s<<'\n';
   // std::reverse(s.begin(),s.end());
    u_int64_t tmp = 0;
    for(int i = 0; i < N; ++i)
    {
        if(i % 64 == 0 && i != 0)
        {
            z.push_back(tmp);
            tmp = 0;
        }

        if(s[i] == '1')
        {
            tmp ^= ((u_int64_t)1 << (63 - i%64));
        }

    }
    if(z.size() != ceil(double(N)/double(64)))
        z.push_back(tmp);
}



void buildX(vector<u_int64_t> &x, const int& N, u_int64_t u)
{
    u_int64_t tmp = 0;
    u_int64_t x0 = 0;
    //std::cout<<"x0:\n";
    L1(u, x0);
    tmp ^= x0 << 63 ;
    //std::cout<<x0;
    for(int i = 1; i < N; ++i)
    {
        if(i % 64 == 0 )
        {
            //std::cout<<" ";
            x.push_back(tmp);
            tmp=0;
        }
        L1(u, x0);
        tmp ^= x0 << (63 - i%64);
        //std::cout<<x0;
    }
    //std::cout<<"\n";
    if(x.size() != ceil(double(N)/double(64)))
        x.push_back(tmp);

}

void buildY(vector<u_int64_t> &x, const int& N, u_int64_t u)
{
    u_int64_t tmp = 0;
    u_int64_t x0 = 0;
    //std::cout<<"x0:\n";
    L2(u, x0);
    tmp ^= x0 << 63 ;
    //std::cout<<x0;
    for(int i = 1; i < N; ++i)
    {
        if(i % 64 == 0 )
        {
            //std::cout<<" ";
            x.push_back(tmp);
            tmp=0;
        }
        L2(u, x0);
        tmp ^= x0 << (63 - i%64);
        //std::cout<<x0;
    }
    //std::cout<<"\n";
    if(x.size() != ceil(double(N)/double(64)))
        x.push_back(tmp);

}

void buildWt(std::vector<int>& wt)
{
    for(int i = 0; i < 65536; ++i)
    {
        int m =0;
        for(int j = 0; j < 16; ++j)
        {
            m += ((i>>j)&1);
        }
        wt.push_back(m);
    }
}
const std::string check

bool checkL1L2(uint64_t cL1,  uint64_t cL2, uint64_t cL3)
{
    for(int k = 0; k < 2048; ++k)
    {
        uint64_t x0 = 0, y0 = 0,s0 = 0;
        L1(cL1, x0);
        L2(cL2, y0);
        L3(cL3, s0);
        uint64_t z = F(x0,y0,s0);
        uint64_t tmpZ = 0;

        if((checkZ[k] == '1') )
        {
            tmpZ = 1;
        }

        if(tmpZ != z)
        {
            return 0;
        }
    }
    //std::cout<<"\n L1: "<< cL1<<" L3:"<< cL2<<" L3:"<<cL3<<"\n";

    return 1;
}


void findL3(const vector<uint64_t>& cL1, const vector<uint64_t>& cL2)
{
    uint64_t t3 = (uint64_t)1<<27;

    #pragma omp parallel for
    for(uint64_t i = 0; i < t3; ++i)
    {
        for(auto k1 : cL1)
        {
            for(auto k2: cL2)
            {
                if (checkL1L2(k1,k2,i) == 1)
                {
                    std::cout<<"\n"<<k1<<" "<<k2<<" "<<i<<"\n";
                }
            }
        }

        if(i % (uint64_t)100000000 == 0)
        {
            std::cout<<"\n"<<i<<"\n";
        }
    }
    return ;
}



int main()
{
    u_int64_t t1 = (u_int64_t)1<<25;
    u_int64_t t2 = (u_int64_t)1<<26;
//
//    int C1 = 81;
//    int N1 = 258;
//    int C2 = 83;
//    int N2 = 265;
    int C1 = 71;
    int N1 = 222;
    int C2 = 73;
    int N2 = 229;

//    int d = 1;
    vector<int> wt;
    buildWt(wt);

    vector<u_int64_t> z;

    takeN(z,N1);

    vector<u_int64_t> candidatesL1;
    vector<u_int64_t> candidatesL2;


    //код пошуку заповнення L1, L2
    #pragma omp parallel for
    for(u_int64_t i = 0; i <t1; ++i)
    {
        vector<u_int64_t> x;
        buildX(x, N1, i);

        int r = R2(x,z, wt);

        if(r<C1)
        {
            candidatesL1.push_back(i);
            std::cout<<'\n'<<i<<" "<<candidatesL1.size()<<'\n';
        }
    }
    vector<u_int64_t> z2;
    takeN(z2,N2);


    #pragma omp parallel for
    for(u_int64_t i = 0; i < t2; ++i)
    {
        vector<u_int64_t> x;
        buildY(x, N2, i);
        int r = R2(x, z2, wt);


        if(r<C2)
        {
            candidatesL2.push_back(i);

            std::cout<<'\n'<<i<<" "<<candidatesL2.size()<<'\n';
        }
    }
    findL3(candidatesL1,candidatesL2);

//    candidatesL1.push_back(827707140);
//    candidatesL1.push_back(829470325);
//
//    for(int i = 0; i < 253; ++i)
//    {
//        uint64_t tm;
//        cin>>tm;
//        candidatesL2.push_back(tm);
//    }
//    for(auto cc: candidatesL2)
//    {
//       std::cout<<cc<<'\n';
//    }
//
//    std::cout<<"done";
//    vector<u_int64_t> cL1;
//    //cL1.push_back(5724344);
//    vector<pair<pair<uint64_t,uint64_t>,uint64_t>> candidatesL3;
//
//    int n1 = 0, n2 = 32;
//
//    vector<uint64_t> copyL1 = candidatesL1;
//    vector<uint64_t> copyL2 = candidatesL2;
//
//
//    findL3(candidatesL1,candidatesL2, n1, n2, candidatesL3);
//
//    std::cout<<candidatesL3.size()<<"\n";
//    std::cin>>n1;
//    std::ofstream outputFile("output.txt"); // Відкриття файлу для запису
//
//    if (outputFile.is_open())
//    {
//        for(auto i : candidatesL3)
//        {
//            outputFile<<i.first.first<<" "<<i.first.second<<" "<<i.second<<'\n';
//        }
//        outputFile.close(); // Закриття файлу
//    }

//
//    n1 = 32;
//    n2 = 64;
//    findL3(candidatesL1,candidatesL2, n1, n2, candidatesL3);


    std::cout<<"done";
}



